# Generated by Django 5.2.4 on 2025-08-21 08:36

import core.models.Documents
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gl_account', models.CharField(help_text='General Ledger account code', max_length=10)),
                ('nature', models.CharField(blank=True, help_text='e.g., Consumable, Asset', max_length=50, null=True)),
                ('hs_code', models.CharField(blank=True, help_text='HS Code for customs', max_length=20, null=True)),
                ('item_code', models.CharField(help_text='SKU or internal code', max_length=20, unique=True)),
                ('item_type', models.CharField(blank=True, choices=[('goods', 'Goods'), ('service', 'Service')], max_length=50, null=True)),
                ('tax_type', models.CharField(help_text='e.g., VAT 15%, Exempt', max_length=50)),
                ('has_import_export', models.BooleanField(default=False)),
                ('declaration_number', models.CharField(blank=True, max_length=50, null=True)),
                ('item_description', models.TextField()),
                ('unit_of_measurement', models.CharField(blank=True, max_length=50, null=True)),
                ('unit_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20)),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
            },
        ),
        migrations.CreateModel(
            name='PurchaseVoucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_name', models.CharField(max_length=255)),
                ('supplier_tin', models.CharField(blank=True, max_length=50, null=True)),
                ('supplier_address', models.TextField()),
                ('date', models.DateField()),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('purchase_recipt_number', models.CharField(max_length=100)),
                ('document', models.BinaryField(blank=True, null=True)),
                ('document_filename', models.CharField(blank=True, max_length=255, null=True)),
                ('document_content_type', models.CharField(blank=True, max_length=100, null=True)),
                ('attachment', models.BinaryField(blank=True, null=True)),
                ('attachment_filename', models.CharField(blank=True, max_length=255, null=True)),
                ('attachment_content_type', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReceiptCatagory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReceiptKind',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReceiptName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReceiptType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ThirtyPercentWithholdingReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_name', models.CharField(max_length=255)),
                ('withholding_receipt_number', models.CharField(max_length=100, unique=True)),
                ('withholding_receipt_date', models.DateField()),
                ('transaction_description', models.TextField(blank=True, null=True)),
                ('sub_total', models.DecimalField(decimal_places=2, max_digits=12)),
                ('tax_withholding_amount', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
                ('buyer_tin', models.CharField(max_length=10)),
                ('seller_tin', models.CharField(max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '30% Withholding Receipt',
                'verbose_name_plural': '30% Withholding Receipts',
                'db_table': 'thirty_percent_withholding_receipt',
                'ordering': ['-withholding_receipt_date'],
            },
        ),
        migrations.CreateModel(
            name='Withholding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('withholding_receipt_number', models.CharField(max_length=50, unique=True)),
                ('withholding_receipt_date', models.DateField()),
                ('transaction_description', models.TextField(blank=True, null=True)),
                ('sub_total', models.DecimalField(decimal_places=2, max_digits=20)),
                ('tax_withholding_amount', models.DecimalField(decimal_places=2, max_digits=20)),
                ('sales_invoice_number', models.CharField(blank=True, max_length=50, null=True)),
                ('main_receipt_number', models.CharField(blank=True, max_length=50, null=True)),
                ('buyer_tin', models.CharField(help_text='TIN of the buyer (deducting party)', max_length=20)),
                ('seller_tin', models.CharField(help_text='TIN of the seller (service provider)', max_length=20)),
                ('supplier_name', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'verbose_name': 'Withholding Record',
                'verbose_name_plural': 'Withholding Records',
                'ordering': ['-withholding_receipt_date'],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('tin_number', models.CharField(db_index=True, help_text='10-digit Ethiopian TIN (e.g., 1234567890)', max_length=10, validators=[django.core.validators.RegexValidator(code='invalid_tin', message='TIN must be exactly 10 digits (numbers only).', regex='^\\d{10}$')])),
                ('address', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'unique_together': {('tin_number',)},
            },
        ),
        migrations.CreateModel(
            name='MainReceiptDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_number', models.CharField(max_length=100)),
                ('company_tin', models.CharField(help_text='10-digit TIN of the company receiving the receipt', max_length=10)),
                ('main_receipt', models.FileField(help_text='Main receipt PDF/document', upload_to=core.models.Documents.main_receipt_upload_path)),
                ('main_receipt_filename', models.CharField(max_length=255)),
                ('main_receipt_content_type', models.CharField(max_length=100)),
                ('main_receipt_hash', models.CharField(blank=True, db_index=True, help_text='MD5 hash to prevent re-upload of same file', max_length=64, null=True)),
                ('attachment', models.FileField(blank=True, help_text='Optional additional attachment', null=True, upload_to=core.models.Documents.main_receipt_upload_path)),
                ('attachment_filename', models.CharField(blank=True, max_length=255, null=True)),
                ('attachment_content_type', models.CharField(blank=True, max_length=100, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Main Receipt Document',
                'verbose_name_plural': 'Main Receipt Documents',
                'unique_together': {('receipt_number', 'company_tin')},
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_number', models.CharField(blank=True, max_length=50, null=True)),
                ('receipt_number', models.CharField(help_text='Receipt/invoice number. Must be unique per vendor and date for your company.', max_length=50)),
                ('receipt_date', models.DateField(help_text='Date of the transaction')),
                ('calendar_type', models.CharField(blank=True, choices=[('gregorian', 'GC'), ('ethiopian', 'EC')], help_text='Gregorian or Ethiopian calendar', max_length=11, null=True)),
                ('is_withholding_applicable', models.BooleanField(default=False, help_text='Indicates if withholding tax applies')),
                ('payment_method_type', models.CharField(help_text='e.g., Cash, Bank Transfer, Mobile Money', max_length=50)),
                ('bank_name', models.CharField(blank=True, help_text='Name of bank if payment was via bank', max_length=100, null=True)),
                ('reason_of_receiving', models.TextField(blank=True, help_text='Optional reason (e.g., service rendered, goods delivered)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expired_vat', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='VAT lost due to late submission or expired claim period', max_digits=20)),
                ('issued_by', models.ForeignKey(help_text='The entity issuing the receipt (always the seller/vendor)', on_delete=django.db.models.deletion.PROTECT, related_name='sales', to='core.contact')),
                ('issued_to', models.ForeignKey(help_text='The entity receiving the receipt (always the buyer/customer)', on_delete=django.db.models.deletion.PROTECT, related_name='purchases', to='core.contact')),
                ('purchase_recipt_number', models.OneToOneField(blank=True, help_text='Link to purchase voucher if related', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='linked_receipt', to='core.purchasevoucher')),
                ('recorded_by', models.ForeignKey(blank=True, help_text='The company entering this receipt (buyer for purchases, seller for sales)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recorded_receipts', to='core.contact')),
                ('receipt_category', models.ForeignKey(blank=True, help_text='High-level category (e.g., Taxable, Exempt)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='receipts', to='core.receiptcatagory')),
                ('receipt_kind', models.ForeignKey(help_text='Kind of receipt (e.g., Sales, Purchase)', on_delete=django.db.models.deletion.PROTECT, related_name='receipts', to='core.receiptkind')),
                ('receipt_name', models.ForeignKey(help_text='Specific name (e.g., VAT Invoice, Receipt)', on_delete=django.db.models.deletion.PROTECT, related_name='receipts', to='core.receiptname')),
                ('receipt_type', models.ForeignKey(help_text='Type (e.g., Invoice, Credit Note)', on_delete=django.db.models.deletion.PROTECT, related_name='receipts', to='core.receipttype')),
                ('withholding_receipt_number', models.ForeignKey(blank=True, help_text='Withholding document if tax was withheld', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_receipts', to='core.withholding')),
            ],
            options={
                'verbose_name': 'Receipt',
                'verbose_name_plural': 'Receipts',
                'ordering': ['-receipt_date'],
            },
        ),
        migrations.CreateModel(
            name='CRVItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gl_account', models.CharField(help_text='General Ledger account code (e.g., 4100 for Sales Income)', max_length=100)),
                ('nature', models.CharField(blank=True, help_text='Nature of income: e.g., Donation, Service Income, Grant', max_length=100, null=True)),
                ('quantity', models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text='Number of units (e.g., hours, items)', max_digits=10)),
                ('amount_per_unit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Income per unit before tax/discount', max_digits=20)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Net amount received after tax/deductions (if any)', max_digits=20)),
                ('declaration_number', models.CharField(blank=True, max_length=50, null=True)),
                ('reason_of_receiving', models.TextField(help_text="Detailed reason for receiving money (e.g., 'Payment for May consulting services')")),
                ('has_import_export', models.BooleanField(default=False, help_text='Check if this income relates to imported service (e.g., foreign client)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('receipt', models.ForeignKey(help_text='The receipt this CRV item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='crv_items', to='core.receipt')),
            ],
            options={
                'verbose_name': 'CRV Item',
                'verbose_name_plural': 'CRV Items',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReceiptLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, default=Decimal('1.00'), max_digits=10)),
                ('unit_cost', models.DecimalField(decimal_places=2, max_digits=20)),
                ('tax_type', models.CharField(max_length=50)),
                ('tax_amount', models.DecimalField(decimal_places=2, max_digits=20)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20)),
                ('item', models.ForeignKey(help_text='Catalog item', on_delete=django.db.models.deletion.PROTECT, to='core.item')),
                ('receipt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='core.receipt')),
            ],
            options={
                'verbose_name': 'Receipt Line',
                'verbose_name_plural': 'Receipt Lines',
            },
        ),
        migrations.CreateModel(
            name='WithholdingReceiptDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('withholding_receipt_number', models.CharField(help_text='Withholding receipt number from tax authority', max_length=100)),
                ('company_tin', models.CharField(help_text='10-digit TIN of the company receiving the withholding receipt', max_length=10)),
                ('withholding_receipt', models.FileField(help_text='Withholding tax receipt', upload_to=core.models.Documents.withholding_receipt_upload_path)),
                ('withholding_receipt_filename', models.CharField(max_length=255)),
                ('withholding_receipt_content_type', models.CharField(max_length=100)),
                ('withholding_attachment', models.FileField(blank=True, help_text='Optional attachment', null=True, upload_to=core.models.Documents.withholding_receipt_upload_path)),
                ('withholding_attachment_filename', models.CharField(blank=True, max_length=255, null=True)),
                ('withholding_attachment_content_type', models.CharField(blank=True, max_length=100, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Withholding Receipt Document',
                'verbose_name_plural': 'Withholding Receipt Documents',
                'unique_together': {('withholding_receipt_number', 'company_tin')},
            },
        ),
        migrations.CreateModel(
            name='ReceiptDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('uploaded', 'Uploaded'), ('processed', 'Processed'), ('rejected', 'Rejected')], default='uploaded', max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('for_company', models.ForeignKey(blank=True, help_text='The company this document is for', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inbox_documents', to='core.contact')),
                ('linked_receipt', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_document', to='core.receipt')),
                ('main_receipt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referenced_by', to='core.mainreceiptdocument')),
                ('uploaded_by_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_documents', to='core.contact')),
                ('withholding_receipt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='referenced_by', to='core.withholdingreceiptdocument')),
            ],
        ),
        migrations.CreateModel(
            name='DraftReceipt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID for this draft', primary_key=True, serialize=False)),
                ('uploaded_document_number', models.CharField(help_text='Original receipt number from upload (e.g., 246)', max_length=90)),
                ('receipt_number', models.CharField(blank=True, help_text='The receipt number the clerk is creating (e.g., FS246)', max_length=50, null=True)),
                ('data', models.JSONField(help_text='Full draft data: issued_by, items, totals, etc.')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('discarded', 'Discarded')], default='draft', help_text='Current state of the draft', max_length=20)),
                ('revision', models.PositiveIntegerField(default=0, help_text='Incremented on each save. Used for optimistic concurrency.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(help_text='The company (recorded_by) creating this receipt', on_delete=django.db.models.deletion.CASCADE, related_name='draft_receipts', to='core.contact')),
            ],
            options={
                'verbose_name': 'Draft Receipt',
                'verbose_name_plural': 'Draft Receipts',
                'db_table': 'receipt_drafts',
                'indexes': [models.Index(fields=['company', 'uploaded_document_number'], name='receipt_dra_company_5bff28_idx'), models.Index(fields=['receipt_number'], name='receipt_dra_receipt_39d28c_idx'), models.Index(fields=['company', 'status'], name='receipt_dra_company_ff37a3_idx'), models.Index(fields=['updated_at'], name='receipt_dra_updated_0569a7_idx')],
                'constraints': [models.UniqueConstraint(fields=('company', 'uploaded_document_number'), name='unique_draft_per_company_per_upload')],
            },
        ),
        migrations.AddIndex(
            model_name='receipt',
            index=models.Index(fields=['recorded_by', 'receipt_date'], name='core_receip_recorde_fc4a46_idx'),
        ),
        migrations.AddIndex(
            model_name='receipt',
            index=models.Index(fields=['recorded_by', 'issued_by', 'receipt_number'], name='core_receip_recorde_fd3fed_idx'),
        ),
        migrations.AddIndex(
            model_name='receipt',
            index=models.Index(fields=['issued_by'], name='core_receip_issued__984397_idx'),
        ),
        migrations.AddIndex(
            model_name='receipt',
            index=models.Index(fields=['issued_to'], name='core_receip_issued__182ffe_idx'),
        ),
        migrations.AddIndex(
            model_name='receipt',
            index=models.Index(fields=['receipt_date'], name='core_receip_receipt_915ade_idx'),
        ),
        migrations.AddIndex(
            model_name='receipt',
            index=models.Index(fields=['receipt_number'], name='core_receip_receipt_839208_idx'),
        ),
        migrations.AddConstraint(
            model_name='receipt',
            constraint=models.UniqueConstraint(fields=('recorded_by', 'issued_by', 'receipt_number', 'receipt_date'), name='unique_receipt_per_vendor_per_day'),
        ),
    ]
